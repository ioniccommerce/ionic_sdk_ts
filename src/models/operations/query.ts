/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type QuerySecurity = {
    apiKeyHeader?: string | undefined;
    apiKeyQuery?: string | undefined;
};

export type QueryResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Successful Response
     */
    queryAPIResponse?: components.QueryAPIResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace QuerySecurity$ {
    export const inboundSchema: z.ZodType<QuerySecurity, z.ZodTypeDef, unknown> = z
        .object({
            APIKeyHeader: z.string().optional(),
            APIKeyQuery: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                APIKeyHeader: "apiKeyHeader",
                APIKeyQuery: "apiKeyQuery",
            });
        });

    export type Outbound = {
        APIKeyHeader?: string | undefined;
        APIKeyQuery?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QuerySecurity> = z
        .object({
            apiKeyHeader: z.string().optional(),
            apiKeyQuery: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKeyHeader: "APIKeyHeader",
                apiKeyQuery: "APIKeyQuery",
            });
        });
}

/** @internal */
export namespace QueryResponse$ {
    export const inboundSchema: z.ZodType<QueryResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            QueryAPIResponse: components.QueryAPIResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                QueryAPIResponse: "queryAPIResponse",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        QueryAPIResponse?: components.QueryAPIResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueryResponse> = z
        .object({
            contentType: z.string(),
            queryAPIResponse: components.QueryAPIResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                queryAPIResponse: "QueryAPIResponse",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
