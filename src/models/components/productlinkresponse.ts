/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { EnrichedProduct, EnrichedProduct$ } from "./enrichedproduct.js";
import * as z from "zod";

export type ProductLinkResponse = {
    id: string;
    idempotencyKey?: string | undefined;
    product: EnrichedProduct;
    referenceId?: string | undefined;
};

/** @internal */
export namespace ProductLinkResponse$ {
    export const inboundSchema: z.ZodType<ProductLinkResponse, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            idempotency_key: z.string().optional(),
            product: EnrichedProduct$.inboundSchema,
            reference_id: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                idempotency_key: "idempotencyKey",
                reference_id: "referenceId",
            });
        });

    export type Outbound = {
        id: string;
        idempotency_key?: string | undefined;
        product: EnrichedProduct$.Outbound;
        reference_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProductLinkResponse> = z
        .object({
            id: z.string(),
            idempotencyKey: z.string().optional(),
            product: EnrichedProduct$.outboundSchema,
            referenceId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                idempotencyKey: "idempotency_key",
                referenceId: "reference_id",
            });
        });
}
