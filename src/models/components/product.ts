/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { Extensions, Extensions$ } from "./extensions.js";
import { Link, Link$ } from "./link.js";
import { ShippingAttribute, ShippingAttribute$ } from "./shippingattribute.js";
import * as z from "zod";

export type Product = {
    brandName?: string | undefined;
    description?: string | undefined;
    extensions?: Extensions | undefined;
    links: Array<Link>;
    merchantLogo?: string | undefined;
    merchantName: string;
    merchantProductId: string;
    name: string;
    price: string;
    referenceUrl?: string | undefined;
    shippingAttributes?: Array<ShippingAttribute> | undefined;
    status: string;
    thumbnail?: string | undefined;
    upc?: string | undefined;
};

/** @internal */
export namespace Product$ {
    export const inboundSchema: z.ZodType<Product, z.ZodTypeDef, unknown> = z
        .object({
            brand_name: z.string().optional(),
            description: z.string().optional(),
            extensions: Extensions$.inboundSchema.optional(),
            links: z.array(Link$.inboundSchema),
            merchant_logo: z.string().optional(),
            merchant_name: z.string(),
            merchant_product_id: z.string(),
            name: z.string(),
            price: z.string(),
            reference_url: z.string().optional(),
            shipping_attributes: z.array(ShippingAttribute$.inboundSchema).optional(),
            status: z.string(),
            thumbnail: z.string().optional(),
            upc: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                brand_name: "brandName",
                merchant_logo: "merchantLogo",
                merchant_name: "merchantName",
                merchant_product_id: "merchantProductId",
                reference_url: "referenceUrl",
                shipping_attributes: "shippingAttributes",
            });
        });

    export type Outbound = {
        brand_name?: string | undefined;
        description?: string | undefined;
        extensions?: Extensions$.Outbound | undefined;
        links: Array<Link$.Outbound>;
        merchant_logo?: string | undefined;
        merchant_name: string;
        merchant_product_id: string;
        name: string;
        price: string;
        reference_url?: string | undefined;
        shipping_attributes?: Array<string> | undefined;
        status: string;
        thumbnail?: string | undefined;
        upc?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Product> = z
        .object({
            brandName: z.string().optional(),
            description: z.string().optional(),
            extensions: Extensions$.outboundSchema.optional(),
            links: z.array(Link$.outboundSchema),
            merchantLogo: z.string().optional(),
            merchantName: z.string(),
            merchantProductId: z.string(),
            name: z.string(),
            price: z.string(),
            referenceUrl: z.string().optional(),
            shippingAttributes: z.array(ShippingAttribute$.outboundSchema).optional(),
            status: z.string(),
            thumbnail: z.string().optional(),
            upc: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                brandName: "brand_name",
                merchantLogo: "merchant_logo",
                merchantName: "merchant_name",
                merchantProductId: "merchant_product_id",
                referenceUrl: "reference_url",
                shippingAttributes: "shipping_attributes",
            });
        });
}
