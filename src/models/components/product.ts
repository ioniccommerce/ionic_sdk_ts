/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Link, Link$ } from "./link";
import { z } from "zod";

export type Product = {
    brandName?: string | undefined;
    links: Array<Link>;
    merchantName: string;
    merchantProductId: string;
    name: string;
    price: string;
    status: string;
    thumbnail: string;
    upc?: string | undefined;
};

/** @internal */
export namespace Product$ {
    export type Inbound = {
        brand_name?: string | undefined;
        links: Array<Link$.Inbound>;
        merchant_name: string;
        merchant_product_id: string;
        name: string;
        price: string;
        status: string;
        thumbnail: string;
        upc?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Product, z.ZodTypeDef, Inbound> = z
        .object({
            brand_name: z.string().optional(),
            links: z.array(Link$.inboundSchema),
            merchant_name: z.string(),
            merchant_product_id: z.string(),
            name: z.string(),
            price: z.string(),
            status: z.string(),
            thumbnail: z.string(),
            upc: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.brand_name === undefined ? null : { brandName: v.brand_name }),
                links: v.links,
                merchantName: v.merchant_name,
                merchantProductId: v.merchant_product_id,
                name: v.name,
                price: v.price,
                status: v.status,
                thumbnail: v.thumbnail,
                ...(v.upc === undefined ? null : { upc: v.upc }),
            };
        });

    export type Outbound = {
        brand_name?: string | undefined;
        links: Array<Link$.Outbound>;
        merchant_name: string;
        merchant_product_id: string;
        name: string;
        price: string;
        status: string;
        thumbnail: string;
        upc?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Product> = z
        .object({
            brandName: z.string().optional(),
            links: z.array(Link$.outboundSchema),
            merchantName: z.string(),
            merchantProductId: z.string(),
            name: z.string(),
            price: z.string(),
            status: z.string(),
            thumbnail: z.string(),
            upc: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.brandName === undefined ? null : { brand_name: v.brandName }),
                links: v.links,
                merchant_name: v.merchantName,
                merchant_product_id: v.merchantProductId,
                name: v.name,
                price: v.price,
                status: v.status,
                thumbnail: v.thumbnail,
                ...(v.upc === undefined ? null : { upc: v.upc }),
            };
        });
}
