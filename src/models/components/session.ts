/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type Session = {
    locale?: string | undefined;
    sessionId?: string | undefined;
    userId?: string | undefined;
};

/** @internal */
export namespace Session$ {
    export const inboundSchema: z.ZodType<Session, z.ZodTypeDef, unknown> = z
        .object({
            locale: z.string().default("en-US"),
            session_id: z.string().optional(),
            user_id: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                session_id: "sessionId",
                user_id: "userId",
            });
        });

    export type Outbound = {
        locale: string;
        session_id?: string | undefined;
        user_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Session> = z
        .object({
            locale: z.string().default("en-US"),
            sessionId: z.string().optional(),
            userId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                sessionId: "session_id",
                userId: "user_id",
            });
        });
}
