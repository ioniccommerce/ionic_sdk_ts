/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type Query = {
    maxPrice?: number | undefined;
    minPrice?: number | undefined;
    numResults?: number | undefined;
    query: string;
};

/** @internal */
export namespace Query$ {
    export const inboundSchema: z.ZodType<Query, z.ZodTypeDef, unknown> = z
        .object({
            max_price: z.number().int().optional(),
            min_price: z.number().int().optional(),
            num_results: z.number().int().default(5),
            query: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                max_price: "maxPrice",
                min_price: "minPrice",
                num_results: "numResults",
            });
        });

    export type Outbound = {
        max_price?: number | undefined;
        min_price?: number | undefined;
        num_results: number;
        query: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Query> = z
        .object({
            maxPrice: z.number().int().optional(),
            minPrice: z.number().int().optional(),
            numResults: z.number().int().default(5),
            query: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                maxPrice: "max_price",
                minPrice: "min_price",
                numResults: "num_results",
            });
        });
}
