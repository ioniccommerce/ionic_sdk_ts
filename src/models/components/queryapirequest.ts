/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Message, Message$ } from "./message";
import { Query, Query$ } from "./query";
import { Session, Session$ } from "./session";
import { z } from "zod";

export type QueryAPIRequest = {
    messages?: Array<Message> | undefined;
    query: Query;
    session?: Session | undefined;
};

/** @internal */
export namespace QueryAPIRequest$ {
    export type Inbound = {
        messages?: Array<Message$.Inbound> | undefined;
        query: Query$.Inbound;
        session?: Session$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<QueryAPIRequest, z.ZodTypeDef, Inbound> = z
        .object({
            messages: z.array(Message$.inboundSchema).optional(),
            query: Query$.inboundSchema,
            session: Session$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.messages === undefined ? null : { messages: v.messages }),
                query: v.query,
                ...(v.session === undefined ? null : { session: v.session }),
            };
        });

    export type Outbound = {
        messages?: Array<Message$.Outbound> | undefined;
        query: Query$.Outbound;
        session?: Session$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueryAPIRequest> = z
        .object({
            messages: z.array(Message$.outboundSchema).optional(),
            query: Query$.outboundSchema,
            session: Session$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.messages === undefined ? null : { messages: v.messages }),
                query: v.query,
                ...(v.session === undefined ? null : { session: v.session }),
            };
        });
}
