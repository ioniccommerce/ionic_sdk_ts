/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Message, Message$ } from "./message.js";
import { Query, Query$ } from "./query.js";
import { Session, Session$ } from "./session.js";
import * as z from "zod";

export type QueryAPIRequest = {
    messages?: Array<Message> | undefined;
    query: Query;
    session?: Session | undefined;
};

/** @internal */
export namespace QueryAPIRequest$ {
    export const inboundSchema: z.ZodType<QueryAPIRequest, z.ZodTypeDef, unknown> = z.object({
        messages: z.array(Message$.inboundSchema).optional(),
        query: Query$.inboundSchema,
        session: Session$.inboundSchema.optional(),
    });

    export type Outbound = {
        messages?: Array<Message$.Outbound> | undefined;
        query: Query$.Outbound;
        session?: Session$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueryAPIRequest> = z.object({
        messages: z.array(Message$.outboundSchema).optional(),
        query: Query$.outboundSchema,
        session: Session$.outboundSchema.optional(),
    });
}
