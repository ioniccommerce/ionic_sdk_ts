/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Product, Product$ } from "./product";
import { Query, Query$ } from "./query";
import { z } from "zod";

export type QueryResult = {
    products: Array<Product>;
    query: Query;
};

/** @internal */
export namespace QueryResult$ {
    export type Inbound = {
        products: Array<Product$.Inbound>;
        query: Query$.Inbound;
    };

    export const inboundSchema: z.ZodType<QueryResult, z.ZodTypeDef, Inbound> = z
        .object({
            products: z.array(Product$.inboundSchema),
            query: Query$.inboundSchema,
        })
        .transform((v) => {
            return {
                products: v.products,
                query: v.query,
            };
        });

    export type Outbound = {
        products: Array<Product$.Outbound>;
        query: Query$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueryResult> = z
        .object({
            products: z.array(Product$.outboundSchema),
            query: Query$.outboundSchema,
        })
        .transform((v) => {
            return {
                products: v.products,
                query: v.query,
            };
        });
}
