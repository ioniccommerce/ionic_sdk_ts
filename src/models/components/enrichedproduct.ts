/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { TaggedLink, TaggedLink$ } from "./taggedlink.js";
import * as z from "zod";

export type EnrichedProduct = {
    extensions?: any | undefined;
    links: TaggedLink;
    referenceId?: string | undefined;
};

/** @internal */
export namespace EnrichedProduct$ {
    export const inboundSchema: z.ZodType<EnrichedProduct, z.ZodTypeDef, unknown> = z
        .object({
            extensions: z.any().optional(),
            links: TaggedLink$.inboundSchema,
            reference_id: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                reference_id: "referenceId",
            });
        });

    export type Outbound = {
        extensions?: any | undefined;
        links: TaggedLink$.Outbound;
        reference_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EnrichedProduct> = z
        .object({
            extensions: z.any().optional(),
            links: TaggedLink$.outboundSchema,
            referenceId: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                referenceId: "reference_id",
            });
        });
}
